// Mocks generated by Mockito 5.3.2 from annotations
// in whatsapp_direct_link/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:fpdart/fpdart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:whatsapp_direct_link/app/core/error/failure.dart' as _i6;
import 'package:whatsapp_direct_link/app/features/whatsapp_link/data/datasources/whatsapp_link_local_datasource.dart'
    as _i4;
import 'package:whatsapp_direct_link/app/features/whatsapp_link/domain/entities/whatsapp_link.dart'
    as _i7;
import 'package:whatsapp_direct_link/app/features/whatsapp_link/domain/repositories/whatsapp_link_repository.dart'
    as _i3;
import 'package:whatsapp_direct_link/app/features/whatsapp_link/domain/usercases/get_whatsapp_direct_link.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWhatsappLinkRepository_1 extends _i1.SmartFake
    implements _i3.WhatsappLinkRepository {
  _FakeWhatsappLinkRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WhatsappLinkLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWhatsappLinkLocalDataSource extends _i1.Mock
    implements _i4.WhatsappLinkLocalDataSource {
  MockWhatsappLinkLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> save({required String? link}) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [],
          {#link: link},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [WhatsappLinkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWhatsappLinkRepository extends _i1.Mock
    implements _i3.WhatsappLinkRepository {
  MockWhatsappLinkRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, String>> getLinkDirect(
          {required _i7.WhatsappLink? whatsappLink}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLinkDirect,
          [],
          {#whatsappLink: whatsappLink},
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, String>>.value(
            _FakeEither_0<_i6.Failure, String>(
          this,
          Invocation.method(
            #getLinkDirect,
            [],
            {#whatsappLink: whatsappLink},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, String>>);
}

/// A class which mocks [GetWhatsappDirectLink].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWhatsappDirectLink extends _i1.Mock
    implements _i8.GetWhatsappDirectLink {
  MockGetWhatsappDirectLink() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.WhatsappLinkRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeWhatsappLinkRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.WhatsappLinkRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, String>> call(_i7.WhatsappLink? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, String>>.value(
            _FakeEither_0<_i6.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, String>>);
}
